name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run tests
      run: npm test
      
    - name: Build project
      run: npm run build

  test-apps:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        app: [odin, zeus]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: apps/${{ matrix.app }}/package-lock.json
        
    - name: Install dependencies for ${{ matrix.app }}
      run: |
        cd apps/${{ matrix.app }}
        npm ci
        
    - name: Run linting for ${{ matrix.app }}
      run: |
        cd apps/${{ matrix.app }}
        npm run lint
        
    - name: Run type checking for ${{ matrix.app }}
      run: |
        cd apps/${{ matrix.app }}
        npm run type-check
        
    - name: Run tests for ${{ matrix.app }}
      run: |
        cd apps/${{ matrix.app }}
        npm test
        
    - name: Build ${{ matrix.app }}
      run: |
        cd apps/${{ matrix.app }}
        npm run build

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level high
      
    - name: Check for sensitive files
      run: |
        if find . -name "*.env" -not -path "./node_modules/*" -not -name "*.env.example" | grep -q .; then
          echo "ERROR: .env files found in repository!"
          find . -name "*.env" -not -path "./node_modules/*" -not -name "*.env.example"
          exit 1
        fi
        
    - name: Check for API keys in code
      run: |
        if grep -r -i "api[_-]key\s*=\s*['\"][^'\"]*['\"]" --exclude-dir=node_modules --exclude="*.md" . | grep -v "your_.*_api_key" | grep -v "example"; then
          echo "ERROR: Potential API keys found in code!"
          exit 1
        fi

  deploy:
    needs: [test, test-apps, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build all apps
      run: |
        npm run build
        cd apps/odin && npm ci && npm run build
        cd ../zeus && npm ci && npm run build
        
    - name: Build Docker images
      run: |
        docker build -t odysseus-api ./apps/api
        docker build -t odysseus-odin ./apps/odin
        docker build -t odysseus-zeus ./apps/zeus
        docker build -t odysseus-bot ./apps/bot
        
    - name: Run smoke tests
      run: |
        # Start services in background
        docker-compose up -d
        sleep 30
        
        # Run smoke tests
        python tests/smoke_test.py
        
        # Cleanup
        docker-compose down

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.deploy.result == 'success' }}
      run: echo "✅ Deployment successful!"
      
    - name: Notify on failure
      if: ${{ needs.deploy.result == 'failure' }}
      run: echo "❌ Deployment failed!"